module addTest (
    input clk,  // clock
    input rst,  // reset
    
    // input
    input button,
    input count[4],
    input error,
    // out is to show input1 input2 input3
    output out[16],
    output v,
    output n,
    output z,
    output true, // will output true if it wants to go the the next step,
    output step[8]
  ) {
  
  .clk(clk) {
    edge_detector edge_detector(#RISE(1), #FALL(0));
    .rst(rst) {
      fsm state = {START, A1, A2, A3, V, N, Z, SUCCESS, FAIL};
      dff timer[28];
      sixteen_bit_adder add;
    }
  }
  // checking cases
  const POS1 = 16b0000000000000011;
  const POS2 = 16b0100000000000001;
  const POS3 = 16b0000000000000000;
  const NEG1 = 16b1011110000001111;
  const NEG2 = 16b1000000000000001;
  const NEG3 = 16b1000000000000001;
  
  // correct results
  const A1RESULT = 16b0100000000000100;
  const A2RESULT = 16b1011110000010010;
  const A3RESULT = 16b0011110000010000;
  const V  = 16b0000000000000010;
  
  // // positive and positive no overflowing
  // const C1A = 16b0000000000000011;
  // const C1B = 16b0100000000000001;
  // const C1  = 16b0100000000000100;
  
  // // positive and negative never overflowing
  // const C2A = 16b0000000000000011;
  // const C2B = 16b1011110000001111;
  // const C2 = 16b1011110000010010;
  
  // // negative and negative, overflowing
  // const C3A = 16b1011110000001111;
  // const C3B = 16b1000000000000001;
  // const C3  = 16b0011110000010000;
  
  // // negative and negative, overflowing
  // const C4A = 16b1000000000000001;
  // const C4B = 16b1000000000000001;
  // const C4  = 16b0000000000000010;
  
  // // 0 + 0
  // const C5A = 16b0000000000000000;
  // const C5B = 16b0000000000000000;
  // const C5  = 16b0000000000000000;
  
  // // negative positive N = 1
  // const C6A = 16b0000000000000011;
  // const C6B = 16b1011110000001111;
  // const C6 =  16b1011110000010010;
  
  always {
    // define default outputs
    out = 0;
    v = add.v;
    n = add.n;
    z = add.z;
    add.a = 0;
    add.b = 0;
    timer.d = timer.q+1;
    // alufn for add
    add.alufn = 8b00000000;
    // define true to be false
    true = 0;
    // first step is 0
    step = 0;
    if (error) {
      add.alufn = 8b1111111;
    }
    
    edge_detector.in = button;
    // cases
    case(state.q) {
      state.START:
        if (count==1 & edge_detector.out) {
          timer.d = 0;
          state.d = state.A1;
        }
      
      state.A1:
        add.a = POS1;
        add.b = POS2;
        step = 1;
        if (timer.q[27:26]==0) {
          // show input1
          out = POS1;
        } else if (timer.q[27:26]==1) {
          out = POS2;
        } else if ( timer.q[27:26]==2) {
          // show result
          out = add.sum;
        } else if (timer.q[27:26]==3) {
          if ((add.sum==A1RESULT) ){//&(add.v==0)&(add.z==0)&(add.n==0)
            timer.d = 0;
            state.d = state.A2;
          } else {
            state.d = state.FAIL;
          }
        }
      
      state.A2:
        add.a = POS1;
        add.b = NEG1;
        step = 2;
        if (timer.q[27:26]==0) {
          // show input1
          out = POS1;
        } else if (timer.q[27:26]==1) {
          out = NEG1;
        } else if ( (timer.q[27:26]==2) ){
          // show result
          out = add.sum;
        } else if ( timer.q[27:26]==3) {
          if ((add.sum==A2RESULT) ){//&(add.v==0)&(add.z==0)&(add.n==1)
            timer.d = 0;
            state.d = state.A3;
          } else {
            state.d = state.FAIL;
          }
        }
      
      
      state.A3:
        add.a = NEG1;
        add.b = NEG2;
        step = 4;
        if (timer.q[27:26]==0) {
          // show input1
          out = NEG1;
        } else if (timer.q[27:26]==1) {
          out = NEG2;
        } else if ( (timer.q[27:26]==2)  ){
          // show result
          out = add.sum;
        } else if (timer.q[27:26]==3) {
          if ((add.sum==A3RESULT)) {//&(add.v==1)&(add.z==0)&(add.n==0)
            timer.d = 0;
            state.d = state.V;
          } else {
            state.d = state.FAIL;
          }
        }
      
      state.V:
        add.a = NEG2;
        add.b = NEG3;
        step = 8;
        if (timer.q[27:26]==0) {
          // show input1
          out = NEG2;
        } else if (timer.q[27:26]==1) {
          out = NEG3;
        } else if ( (timer.q[27:26]==2) ){
          // show result
          out = add.sum;
        } else if (timer.q[27:26]==3) {
          if ((add.sum==V) ){//&(add.v==1)&(add.z==0)&(add.n==0)
            timer.d = 0;
            state.d = state.Z;
          } else {
            state.d = state.FAIL;
          }
        }
      
      state.Z:
        add.a = POS3;
        add.b = POS3;
        step = 16;
        if (timer.q[27:26]==0) {
          // show input1
          out = POS3;
        } else if (timer.q[27:26]==1) {
          out = POS3;
        } else if ( (timer.q[27:26]==2) ){
          // show result
          out = add.sum;
        } else if (timer.q[27:26]==3) {
          if ((add.sum==0)){//&(add.v==0)&(add.z==0)&(add.n==0)
            timer.d = 0;
            state.d = state.N;
          } else {
            state.d = state.FAIL;
          }
        }
      
      state.N:
        add.a = POS1;
        add.b = NEG1;
        step = 32;
        if (timer.q[27:26]==0) {
          // show input1
          out = POS1;
        } else if (timer.q[27:26]==1) {
          out = NEG1;
        } else if ( timer.q[27:26]==2  ){
          // show result
          out = add.sum;
        } else if (timer.q[27:26]==3) {
          if ((add.sum==A2RESULT)) {//&(add.v==0)&(add.z==0)&(add.n==1)
            timer.d = 0;
            state.d = state.SUCCESS;
          } else {
            state.d = state.FAIL;
          }
        }
      
      state.SUCCESS:
        if (timer.q[27] == 1) {
          true = 1;
          
        } else if (timer.q[25] == 1) {
          out = 16b1111111100000000;
        } else if (timer.q[25]==0){
          out = 16b0000000000000000;
        }
      
      state.FAIL:
        if (timer.q[25] == 1) {
          out = 16b0000000011111111;
        } else {
          out = 16b0000000000000000;
        }
      
      
    }
  }
}