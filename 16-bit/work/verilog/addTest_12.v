/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module addTest_12 (
    input clk,
    input rst,
    input button,
    input [3:0] count,
    input error,
    output reg [15:0] out,
    output reg v,
    output reg n,
    output reg z,
    output reg true,
    output reg [7:0] step
  );
  
  
  
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_2 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  localparam START_state = 4'd0;
  localparam A1_state = 4'd1;
  localparam A2_state = 4'd2;
  localparam A3_state = 4'd3;
  localparam V_state = 4'd4;
  localparam N_state = 4'd5;
  localparam Z_state = 4'd6;
  localparam SUCCESS_state = 4'd7;
  localparam FAIL_state = 4'd8;
  
  reg [3:0] M_state_d, M_state_q = START_state;
  reg [27:0] M_timer_d, M_timer_q = 1'h0;
  wire [16-1:0] M_add_sum;
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_v;
  wire [1-1:0] M_add_n;
  reg [16-1:0] M_add_a;
  reg [16-1:0] M_add_b;
  reg [6-1:0] M_add_alufn;
  sixteen_bit_adder_6 add (
    .clk(clk),
    .rst(rst),
    .a(M_add_a),
    .b(M_add_b),
    .alufn(M_add_alufn),
    .sum(M_add_sum),
    .z(M_add_z),
    .v(M_add_v),
    .n(M_add_n)
  );
  
  localparam POS1 = 16'h0003;
  
  localparam POS2 = 16'h4001;
  
  localparam POS3 = 16'h0000;
  
  localparam NEG1 = 16'hbc0f;
  
  localparam NEG2 = 16'h8001;
  
  localparam NEG3 = 16'h8001;
  
  localparam A1RESULT = 16'h4004;
  
  localparam A2RESULT = 16'hbc12;
  
  localparam A3RESULT = 16'h3c10;
  
  localparam V = 16'h0002;
  
  always @* begin
    M_state_d = M_state_q;
    M_timer_d = M_timer_q;
    
    out = 1'h0;
    v = M_add_v;
    n = M_add_n;
    z = M_add_z;
    M_add_a = 1'h0;
    M_add_b = 1'h0;
    M_timer_d = M_timer_q + 1'h1;
    M_add_alufn = 8'h00;
    true = 1'h0;
    step = 1'h0;
    if (error) begin
      M_add_alufn = 8'h7f;
    end
    M_edge_detector_in = button;
    
    case (M_state_q)
      START_state: begin
        if (count == 1'h1 & M_edge_detector_out) begin
          M_timer_d = 1'h0;
          M_state_d = A1_state;
        end
      end
      A1_state: begin
        M_add_a = 16'h0003;
        M_add_b = 16'h4001;
        step = 1'h1;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h0003;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h4001;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_add_sum;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_add_sum == 16'h4004)) begin
                  M_timer_d = 1'h0;
                  M_state_d = A2_state;
                end else begin
                  M_state_d = FAIL_state;
                end
              end
            end
          end
        end
      end
      A2_state: begin
        M_add_a = 16'h0003;
        M_add_b = 16'hbc0f;
        step = 2'h2;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h0003;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'hbc0f;
          end else begin
            if ((M_timer_q[26+1-:2] == 2'h2)) begin
              out = M_add_sum;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_add_sum == 16'hbc12)) begin
                  M_timer_d = 1'h0;
                  M_state_d = A3_state;
                end else begin
                  M_state_d = FAIL_state;
                end
              end
            end
          end
        end
      end
      A3_state: begin
        M_add_a = 16'hbc0f;
        M_add_b = 16'h8001;
        step = 3'h4;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'hbc0f;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h8001;
          end else begin
            if ((M_timer_q[26+1-:2] == 2'h2)) begin
              out = M_add_sum;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_add_sum == 16'h3c10)) begin
                  M_timer_d = 1'h0;
                  M_state_d = V_state;
                end else begin
                  M_state_d = FAIL_state;
                end
              end
            end
          end
        end
      end
      V_state: begin
        M_add_a = 16'h8001;
        M_add_b = 16'h8001;
        step = 4'h8;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h8001;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h8001;
          end else begin
            if ((M_timer_q[26+1-:2] == 2'h2)) begin
              out = M_add_sum;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_add_sum == 16'h0002)) begin
                  M_timer_d = 1'h0;
                  M_state_d = Z_state;
                end else begin
                  M_state_d = FAIL_state;
                end
              end
            end
          end
        end
      end
      Z_state: begin
        M_add_a = 16'h0000;
        M_add_b = 16'h0000;
        step = 5'h10;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h0000;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h0000;
          end else begin
            if ((M_timer_q[26+1-:2] == 2'h2)) begin
              out = M_add_sum;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_add_sum == 1'h0)) begin
                  M_timer_d = 1'h0;
                  M_state_d = N_state;
                end else begin
                  M_state_d = FAIL_state;
                end
              end
            end
          end
        end
      end
      N_state: begin
        M_add_a = 16'h0003;
        M_add_b = 16'hbc0f;
        step = 6'h20;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h0003;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'hbc0f;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_add_sum;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if ((M_add_sum == 16'hbc12)) begin
                  M_timer_d = 1'h0;
                  M_state_d = SUCCESS_state;
                end else begin
                  M_state_d = FAIL_state;
                end
              end
            end
          end
        end
      end
      SUCCESS_state: begin
        if (M_timer_q[27+0-:1] == 1'h1) begin
          true = 1'h1;
        end else begin
          if (M_timer_q[25+0-:1] == 1'h1) begin
            out = 16'hff00;
          end else begin
            if (M_timer_q[25+0-:1] == 1'h0) begin
              out = 16'h0000;
            end
          end
        end
      end
      FAIL_state: begin
        if (M_timer_q[25+0-:1] == 1'h1) begin
          out = 16'h00ff;
        end else begin
          out = 16'h0000;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_timer_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_timer_q <= M_timer_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
