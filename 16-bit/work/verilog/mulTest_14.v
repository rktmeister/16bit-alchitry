/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mulTest_14 (
    input clk,
    input rst,
    input button,
    input [3:0] count,
    output reg [15:0] out,
    output reg true,
    output reg [7:0] step
  );
  
  
  
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_2 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  localparam START_state = 3'd0;
  localparam M1_state = 3'd1;
  localparam M2_state = 3'd2;
  localparam M3_state = 3'd3;
  localparam M4_state = 3'd4;
  localparam SUCCESS_state = 3'd5;
  localparam FAIL_state = 3'd6;
  
  reg [2:0] M_state_d, M_state_q = START_state;
  reg [27:0] M_timer_d, M_timer_q = 1'h0;
  wire [16-1:0] M_mul_out;
  reg [16-1:0] M_mul_a;
  reg [16-1:0] M_mul_b;
  reg [6-1:0] M_mul_alufn;
  sixteenbitmul_10 mul (
    .clk(clk),
    .rst(rst),
    .a(M_mul_a),
    .b(M_mul_b),
    .alufn(M_mul_alufn),
    .out(M_mul_out)
  );
  
  localparam POS1A = 16'h0002;
  
  localparam POS1B = 16'h0004;
  
  localparam M1RESULT = 16'h0008;
  
  localparam POS2A = 16'h4001;
  
  localparam POS2B = 16'h0003;
  
  localparam M2RESULT = 16'hc003;
  
  localparam POS3A = 16'h0001;
  
  localparam NEG3B = 16'hffff;
  
  localparam M3RESULT = 16'hffff;
  
  localparam NEG4A = 16'hffff;
  
  localparam NEG4B = 16'hfff8;
  
  localparam M4RESULT = 16'h0008;
  
  always @* begin
    M_state_d = M_state_q;
    M_timer_d = M_timer_q;
    
    out = 1'h0;
    M_mul_a = 1'h0;
    M_mul_b = 1'h0;
    M_timer_d = M_timer_q + 1'h1;
    M_mul_alufn = 8'h02;
    true = 1'h0;
    M_edge_detector_in = button;
    step = 1'h0;
    
    case (M_state_q)
      START_state: begin
        if (count == 2'h3 & M_edge_detector_out) begin
          M_timer_d = 1'h0;
          M_state_d = M1_state;
        end
      end
      M1_state: begin
        M_mul_a = 16'h0002;
        M_mul_b = 16'h0004;
        step = 1'h1;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h0002;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h0004;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_mul_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if (M_mul_out == 16'h0008) begin
                  M_timer_d = 1'h0;
                  M_state_d = M2_state;
                end else begin
                  M_state_d = FAIL_state;
                end
              end
            end
          end
        end
      end
      M2_state: begin
        M_mul_a = 16'h4001;
        M_mul_b = 16'h0003;
        step = 2'h2;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h4001;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'h0003;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_mul_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if (M_mul_out == 16'hc003) begin
                  M_timer_d = 1'h0;
                  M_state_d = M3_state;
                end else begin
                  M_state_d = FAIL_state;
                end
              end
            end
          end
        end
      end
      M3_state: begin
        M_mul_a = 16'h0001;
        M_mul_b = 16'hffff;
        step = 3'h4;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'h0001;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'hffff;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_mul_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if (M_mul_out == 16'hffff) begin
                  M_timer_d = 1'h0;
                  M_state_d = M4_state;
                end else begin
                  M_state_d = FAIL_state;
                end
              end
            end
          end
        end
      end
      M4_state: begin
        M_mul_a = 16'hffff;
        M_mul_b = 16'hfff8;
        step = 4'h8;
        if (M_timer_q[26+1-:2] == 1'h0) begin
          out = 16'hffff;
        end else begin
          if (M_timer_q[26+1-:2] == 1'h1) begin
            out = 16'hfff8;
          end else begin
            if (M_timer_q[26+1-:2] == 2'h2) begin
              out = M_mul_out;
            end else begin
              if (M_timer_q[26+1-:2] == 2'h3) begin
                if (M_mul_out == 16'h0008) begin
                  M_timer_d = 1'h0;
                  M_state_d = SUCCESS_state;
                end else begin
                  M_state_d = FAIL_state;
                end
              end
            end
          end
        end
      end
      SUCCESS_state: begin
        if (M_timer_q[27+0-:1] == 1'h1) begin
          true = 1'h1;
        end else begin
          if (M_timer_q[25+0-:1] == 1'h1) begin
            out = 16'hff00;
          end else begin
            if (M_timer_q[25+0-:1] == 1'h0) begin
              out = 16'h0000;
            end
          end
        end
      end
      FAIL_state: begin
        if (M_timer_q[25+0-:1] == 1'h1) begin
          out = 16'h00ff;
        end else begin
          out = 16'h0000;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_timer_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_timer_q <= M_timer_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
