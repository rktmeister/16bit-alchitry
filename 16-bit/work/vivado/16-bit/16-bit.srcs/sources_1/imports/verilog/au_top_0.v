/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_manual_a_out;
  reg [1-1:0] M_manual_a_in;
  edge_detector_2 manual_a (
    .clk(clk),
    .in(M_manual_a_in),
    .out(M_manual_a_out)
  );
  wire [1-1:0] M_manual_b_out;
  reg [1-1:0] M_manual_b_in;
  edge_detector_2 manual_b (
    .clk(clk),
    .in(M_manual_b_in),
    .out(M_manual_b_out)
  );
  wire [1-1:0] M_manual_result_out;
  reg [1-1:0] M_manual_result_in;
  edge_detector_2 manual_result (
    .clk(clk),
    .in(M_manual_result_in),
    .out(M_manual_result_out)
  );
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  sixteenbitalu_3 alu (
    .clk(clk),
    .rst(rst),
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  reg [15:0] M_input1_d, M_input1_q = 1'h0;
  reg [15:0] M_input2_d, M_input2_q = 1'h0;
  reg [15:0] M_result_d, M_result_q = 1'h0;
  wire [16-1:0] M_tst_seg;
  wire [16-1:0] M_tst_out;
  wire [8-1:0] M_tst_step;
  wire [1-1:0] M_tst_v;
  wire [1-1:0] M_tst_n;
  wire [1-1:0] M_tst_z;
  reg [1-1:0] M_tst_button;
  reg [1-1:0] M_tst_error;
  tst_4 tst (
    .clk(clk),
    .rst(rst),
    .button(M_tst_button),
    .error(M_tst_error),
    .seg(M_tst_seg),
    .out(M_tst_out),
    .step(M_tst_step),
    .v(M_tst_v),
    .n(M_tst_n),
    .z(M_tst_z)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_5 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  always @* begin
    M_result_d = M_result_q;
    M_input2_d = M_input2_q;
    M_input1_d = M_input1_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_manual_a_in = io_button[0+0-:1];
    M_manual_b_in = io_button[2+0-:1];
    M_manual_result_in = io_button[3+0-:1];
    M_alu_a = M_input1_q;
    M_alu_b = M_input2_q;
    M_alu_alufn = io_dip[16+0+0-:1];
    io_led[0+7-:8] = M_result_q[0+7-:8];
    io_led[8+7-:8] = M_result_q[8+7-:8];
    io_led[16+7-:8] = io_dip[16+7-:8];
    M_tst_button = io_button[1+0-:1];
    M_seg_values = 16'h0000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_tst_error = 1'h0;
    if (io_dip[16+6+1-:2] == 2'h3) begin
      led = {5'h00, M_alu_z, M_alu_v, M_alu_n};
      io_led[0+7-:8] = M_result_q[0+7-:8];
      io_led[8+7-:8] = M_result_q[8+7-:8];
      M_seg_values = 16'h0003;
      if (M_manual_result_out) begin
        M_result_d = M_alu_out;
      end
    end else begin
      if (io_dip[16+6+1-:2] == 1'h1) begin
        io_led[0+7-:8] = M_input1_q[0+7-:8];
        io_led[8+7-:8] = M_input1_q[8+7-:8];
        M_seg_values = 16'h0001;
        if (M_manual_a_out) begin
          M_input1_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
        end
      end else begin
        if (io_dip[16+6+1-:2] == 2'h2) begin
          io_led[0+7-:8] = M_input2_q[0+7-:8];
          io_led[8+7-:8] = M_input2_q[8+7-:8];
          M_seg_values = 16'h0002;
          if (M_manual_b_out) begin
            M_input2_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
          end
        end else begin
          if (io_dip[16+6+1-:2] == 1'h0) begin
            io_led[0+7-:8] = M_tst_out[0+7-:8];
            io_led[8+7-:8] = M_tst_out[8+7-:8];
            io_led[16+7-:8] = M_tst_step;
            M_tst_error = io_dip[16+0+0-:1];
            M_seg_values = {M_tst_seg[12+3-:4], M_tst_seg[8+3-:4], M_tst_seg[4+3-:4], M_tst_seg[0+3-:4]};
          end
        end
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_input1_q <= 1'h0;
      M_input2_q <= 1'h0;
      M_result_q <= 1'h0;
    end else begin
      M_input1_q <= M_input1_d;
      M_input2_q <= M_input2_d;
      M_result_q <= M_result_d;
    end
  end
  
endmodule
